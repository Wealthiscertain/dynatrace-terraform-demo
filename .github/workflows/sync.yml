name: Sync Dynatrace Management Zones

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 5 * * *"   # daily at 05:00 UTC 

jobs:
  sync:
    runs-on: ubuntu-latest

    permissions:
      contents: write       
      pull-requests: write  

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Fetch Management Zones from Dynatrace API
        env:
          DT_ENV_URL: ${{ secrets.DT_ENV_URL }}
          DT_API_TOKEN: ${{ secrets.DT_API_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p scripts/tmp
          curl -sS \
            -H "Authorization: Api-Token ${DT_API_TOKEN}" \
            "${DT_ENV_URL%/}/api/config/v1/managementZones" \
            | tee scripts/tmp/mz.json

      - name: Generate import blocks for unseen MZs
        run: |
          set -euo pipefail
          jq -r '
            .values[]
            | .id as $id
            | .name as $n
            | "import {\n  to = dynatrace_management_zone_v2.mz_" +
              ($n | ascii_downcase | gsub("[^a-z0-9]+"; "_")) +
              "\n  id = \"" + $id + "\"\n}\n"
          ' scripts/tmp/mz.json > import_management_zones.tf

          echo "Wrote import blocks to import_management_zones.tf"
          cat import_management_zones.tf

      - name: Ensure provider & variables exist (idempotent)
        run: |
          # Creates minimal files if missing; adjust to your repo’s layout.
          [ -f variables.tf ] || cat > variables.tf <<'EOF'
          variable "dt_env_url"   { type = string }
          variable "dt_api_token" { type = string sensitive = true }
          EOF

          [ -f main.tf ] || cat > main.tf <<'EOF'
          terraform {
            required_providers {
              dynatrace = {
                source  = "dynatrace-oss/dynatrace"
                version = ">= 1.77.0"
              }
            }
          }
          provider "dynatrace" {
            dt_env_url   = var.dt_env_url
            dt_api_token = var.dt_api_token
          }
          EOF

      - name: Terraform init
        run: terraform init

      - name: Plan & generate missing config from import blocks
        env:
          DT_ENV_URL: ${{ secrets.DT_ENV_URL }}
          DT_API_TOKEN: ${{ secrets.DT_API_TOKEN }}
        run: |
          terraform plan \
            -var="dt_env_url=${DT_ENV_URL}" \
            -var="dt_api_token=${DT_API_TOKEN}" \
            -generate-config-out=generated_mz.tf

          echo "Generated configuration (if any) at generated_mz.tf"
          test -s generated_mz.tf && sed -n '1,120p' generated_mz.tf || true

      - name: Create PR with generated files (if there are changes)
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "Sync Dynatrace Management Zones → Terraform"
          title: "Sync Dynatrace Management Zones (UI → Code)"
          body: |
            This PR was generated by the Sync workflow.
            - Lists MZs from Dynatrace API
            - Creates import blocks
            - Runs `terraform plan -generate-config-out` to write HCL
          branch: chore/sync-dt-management-zones
          labels: infra, terraform, dynatrace


